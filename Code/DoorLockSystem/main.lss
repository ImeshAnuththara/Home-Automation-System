
main.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000050a  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000044  00800060  0000050a  0000059e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000002  008000a4  008000a4  000005e2  2**0
                  ALLOC
  3 .debug_aranges 00000020  00000000  00000000  000005e2  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_pubnames 0000009e  00000000  00000000  00000602  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00001324  00000000  00000000  000006a0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000025d  00000000  00000000  000019c4  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000937  00000000  00000000  00001c21  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000000a0  00000000  00000000  00002558  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000124  00000000  00000000  000025f8  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000008ba  00000000  00000000  0000271c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000258  00000000  00000000  00002fd6  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	ea e0       	ldi	r30, 0x0A	; 10
  68:	f5 e0       	ldi	r31, 0x05	; 5
  6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
  70:	a4 3a       	cpi	r26, 0xA4	; 164
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
  76:	10 e0       	ldi	r17, 0x00	; 0
  78:	a4 ea       	ldi	r26, 0xA4	; 164
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a6 3a       	cpi	r26, 0xA6	; 166
  82:	b1 07       	cpc	r27, r17
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 7c 01 	call	0x2f8	; 0x2f8 <main>
  8a:	0c 94 83 02 	jmp	0x506	; 0x506 <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <keycheck>:
	return key;
}

char keycheck(){

	PORTD=0b11101111;
  92:	8f ee       	ldi	r24, 0xEF	; 239
  94:	82 bb       	out	0x12, r24	; 18
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
  96:	24 ec       	ldi	r18, 0xC4	; 196
  98:	39 e0       	ldi	r19, 0x09	; 9
  9a:	c9 01       	movw	r24, r18
  9c:	01 97       	sbiw	r24, 0x01	; 1
  9e:	f1 f7       	brne	.-4      	; 0x9c <keycheck+0xa>
	_delay_ms(10);

	if((PIND&0b00000001)==0){
  a0:	80 99       	sbic	0x10, 0	; 16
  a2:	05 c0       	rjmp	.+10     	; 0xae <keycheck+0x1c>
  a4:	c9 01       	movw	r24, r18
  a6:	01 97       	sbiw	r24, 0x01	; 1
  a8:	f1 f7       	brne	.-4      	; 0xa6 <keycheck+0x14>
  aa:	87 e3       	ldi	r24, 0x37	; 55
  ac:	08 95       	ret
		_delay_ms(10);
		return '7';
	}

	if((PIND&0b00000010)==0){
  ae:	81 99       	sbic	0x10, 1	; 16
  b0:	05 c0       	rjmp	.+10     	; 0xbc <keycheck+0x2a>
  b2:	c9 01       	movw	r24, r18
  b4:	01 97       	sbiw	r24, 0x01	; 1
  b6:	f1 f7       	brne	.-4      	; 0xb4 <keycheck+0x22>
  b8:	88 e3       	ldi	r24, 0x38	; 56
  ba:	08 95       	ret
		_delay_ms(10);
		return '8';
	}

	if((PIND&0b00000100)==0){
  bc:	82 99       	sbic	0x10, 2	; 16
  be:	05 c0       	rjmp	.+10     	; 0xca <keycheck+0x38>
  c0:	c9 01       	movw	r24, r18
  c2:	01 97       	sbiw	r24, 0x01	; 1
  c4:	f1 f7       	brne	.-4      	; 0xc2 <keycheck+0x30>
  c6:	89 e3       	ldi	r24, 0x39	; 57
  c8:	08 95       	ret
		_delay_ms(10);
		return '9';
	}
	if((PIND&0b00001000)==0){
  ca:	83 99       	sbic	0x10, 3	; 16
  cc:	05 c0       	rjmp	.+10     	; 0xd8 <keycheck+0x46>
  ce:	c9 01       	movw	r24, r18
  d0:	01 97       	sbiw	r24, 0x01	; 1
  d2:	f1 f7       	brne	.-4      	; 0xd0 <keycheck+0x3e>
  d4:	83 e4       	ldi	r24, 0x43	; 67
  d6:	08 95       	ret
			_delay_ms(10);
			return 'C';
	}
	
	PORTD=0b11011111;
  d8:	8f ed       	ldi	r24, 0xDF	; 223
  da:	82 bb       	out	0x12, r24	; 18
  dc:	c9 01       	movw	r24, r18
  de:	01 97       	sbiw	r24, 0x01	; 1
  e0:	f1 f7       	brne	.-4      	; 0xde <keycheck+0x4c>
	_delay_ms(10);
	if((PIND&0b00000001)==0){
  e2:	80 99       	sbic	0x10, 0	; 16
  e4:	05 c0       	rjmp	.+10     	; 0xf0 <keycheck+0x5e>
  e6:	c9 01       	movw	r24, r18
  e8:	01 97       	sbiw	r24, 0x01	; 1
  ea:	f1 f7       	brne	.-4      	; 0xe8 <keycheck+0x56>
  ec:	84 e3       	ldi	r24, 0x34	; 52
  ee:	08 95       	ret
		_delay_ms(10);
		return '4';
	}

	if((PIND&0b00000010)==0){
  f0:	81 99       	sbic	0x10, 1	; 16
  f2:	05 c0       	rjmp	.+10     	; 0xfe <keycheck+0x6c>
  f4:	c9 01       	movw	r24, r18
  f6:	01 97       	sbiw	r24, 0x01	; 1
  f8:	f1 f7       	brne	.-4      	; 0xf6 <keycheck+0x64>
  fa:	85 e3       	ldi	r24, 0x35	; 53
  fc:	08 95       	ret
		_delay_ms(10);
		return '5';
	}

	if((PIND&0b00000100)==0){
  fe:	82 99       	sbic	0x10, 2	; 16
 100:	05 c0       	rjmp	.+10     	; 0x10c <keycheck+0x7a>
 102:	c9 01       	movw	r24, r18
 104:	01 97       	sbiw	r24, 0x01	; 1
 106:	f1 f7       	brne	.-4      	; 0x104 <keycheck+0x72>
 108:	86 e3       	ldi	r24, 0x36	; 54
 10a:	08 95       	ret
		_delay_ms(10);
		return '6';

	}
	if((PIND&0b00001000)==0){
 10c:	83 99       	sbic	0x10, 3	; 16
 10e:	05 c0       	rjmp	.+10     	; 0x11a <keycheck+0x88>
 110:	c9 01       	movw	r24, r18
 112:	01 97       	sbiw	r24, 0x01	; 1
 114:	f1 f7       	brne	.-4      	; 0x112 <keycheck+0x80>
 116:	82 e4       	ldi	r24, 0x42	; 66
 118:	08 95       	ret
		_delay_ms(10);
		return 'B';
	}

	PORTD=0b10111111;
 11a:	8f eb       	ldi	r24, 0xBF	; 191
 11c:	82 bb       	out	0x12, r24	; 18
 11e:	c9 01       	movw	r24, r18
 120:	01 97       	sbiw	r24, 0x01	; 1
 122:	f1 f7       	brne	.-4      	; 0x120 <keycheck+0x8e>
	_delay_ms(10);

	if((PIND&0b00000001)==0){
 124:	80 99       	sbic	0x10, 0	; 16
 126:	05 c0       	rjmp	.+10     	; 0x132 <keycheck+0xa0>
 128:	c9 01       	movw	r24, r18
 12a:	01 97       	sbiw	r24, 0x01	; 1
 12c:	f1 f7       	brne	.-4      	; 0x12a <keycheck+0x98>
 12e:	81 e3       	ldi	r24, 0x31	; 49
 130:	08 95       	ret
		_delay_ms(10);
		return '1';
	}

	if((PIND&0b00000010)==0){
 132:	81 99       	sbic	0x10, 1	; 16
 134:	06 c0       	rjmp	.+12     	; 0x142 <keycheck+0xb0>
 136:	84 ec       	ldi	r24, 0xC4	; 196
 138:	99 e0       	ldi	r25, 0x09	; 9
 13a:	01 97       	sbiw	r24, 0x01	; 1
 13c:	f1 f7       	brne	.-4      	; 0x13a <keycheck+0xa8>
 13e:	82 e3       	ldi	r24, 0x32	; 50
 140:	08 95       	ret
		_delay_ms(10);
		return '2';
	}

	if((PIND&0b00000100)==0){
 142:	82 99       	sbic	0x10, 2	; 16
 144:	06 c0       	rjmp	.+12     	; 0x152 <keycheck+0xc0>
 146:	84 ec       	ldi	r24, 0xC4	; 196
 148:	99 e0       	ldi	r25, 0x09	; 9
 14a:	01 97       	sbiw	r24, 0x01	; 1
 14c:	f1 f7       	brne	.-4      	; 0x14a <keycheck+0xb8>
 14e:	83 e3       	ldi	r24, 0x33	; 51
 150:	08 95       	ret
		_delay_ms(10);
		return '3';
	}
	if((PIND&0b00001000)==0){
 152:	83 99       	sbic	0x10, 3	; 16
 154:	06 c0       	rjmp	.+12     	; 0x162 <keycheck+0xd0>
 156:	84 ec       	ldi	r24, 0xC4	; 196
 158:	99 e0       	ldi	r25, 0x09	; 9
 15a:	01 97       	sbiw	r24, 0x01	; 1
 15c:	f1 f7       	brne	.-4      	; 0x15a <keycheck+0xc8>
 15e:	81 e4       	ldi	r24, 0x41	; 65
 160:	08 95       	ret
		_delay_ms(10);
		return'A';
	}

	PORTD=0b01111111;
 162:	8f e7       	ldi	r24, 0x7F	; 127
 164:	82 bb       	out	0x12, r24	; 18
 166:	24 ec       	ldi	r18, 0xC4	; 196
 168:	39 e0       	ldi	r19, 0x09	; 9
 16a:	c9 01       	movw	r24, r18
 16c:	01 97       	sbiw	r24, 0x01	; 1
 16e:	f1 f7       	brne	.-4      	; 0x16c <keycheck+0xda>
	_delay_ms(10);

	if((PIND&0b00000001)==0){
 170:	80 99       	sbic	0x10, 0	; 16
 172:	05 c0       	rjmp	.+10     	; 0x17e <keycheck+0xec>
 174:	c9 01       	movw	r24, r18
 176:	01 97       	sbiw	r24, 0x01	; 1
 178:	f1 f7       	brne	.-4      	; 0x176 <keycheck+0xe4>
 17a:	8a e2       	ldi	r24, 0x2A	; 42
 17c:	08 95       	ret
		_delay_ms(10);
		return '*';
	}
	if((PIND&0b00000010)==0){
 17e:	81 99       	sbic	0x10, 1	; 16
 180:	05 c0       	rjmp	.+10     	; 0x18c <keycheck+0xfa>
 182:	c9 01       	movw	r24, r18
 184:	01 97       	sbiw	r24, 0x01	; 1
 186:	f1 f7       	brne	.-4      	; 0x184 <keycheck+0xf2>
 188:	80 e3       	ldi	r24, 0x30	; 48
 18a:	08 95       	ret
		_delay_ms(10);
		return '0';
	}

	if((PIND&0b00000100)==0){
 18c:	82 99       	sbic	0x10, 2	; 16
 18e:	05 c0       	rjmp	.+10     	; 0x19a <keycheck+0x108>
 190:	c9 01       	movw	r24, r18
 192:	01 97       	sbiw	r24, 0x01	; 1
 194:	f1 f7       	brne	.-4      	; 0x192 <keycheck+0x100>
 196:	83 e2       	ldi	r24, 0x23	; 35
 198:	08 95       	ret
		_delay_ms(10);
		return '#';
	}
	if((PIND&0b00001000)==0){
 19a:	83 9b       	sbis	0x10, 3	; 16
 19c:	02 c0       	rjmp	.+4      	; 0x1a2 <keycheck+0x110>
 19e:	81 e6       	ldi	r24, 0x61	; 97
 1a0:	08 95       	ret
 1a2:	c9 01       	movw	r24, r18
 1a4:	01 97       	sbiw	r24, 0x01	; 1
 1a6:	f1 f7       	brne	.-4      	; 0x1a4 <keycheck+0x112>
 1a8:	84 e4       	ldi	r24, 0x44	; 68
		_delay_ms(10);
		return'D';
	}
	
	return 'a';
}
 1aa:	08 95       	ret

000001ac <scankey>:
char scankey(){

	char key='a';
	while(key=='a'){

		key=keycheck();   
 1ac:	0e 94 49 00 	call	0x92	; 0x92 <keycheck>


char scankey(){

	char key='a';
	while(key=='a'){
 1b0:	81 36       	cpi	r24, 0x61	; 97
 1b2:	e1 f3       	breq	.-8      	; 0x1ac <scankey>
		key=keycheck();   
       
	}

	return key;
}
 1b4:	08 95       	ret

000001b6 <lcdint>:



void lcdcmd(unsigned char x){

	lcdport=x;
 1b6:	88 e3       	ldi	r24, 0x38	; 56
 1b8:	8b bb       	out	0x1b, r24	; 27
	signal=(0<<rs)|(0<<rw)|(1<<en);
 1ba:	94 e0       	ldi	r25, 0x04	; 4
 1bc:	98 bb       	out	0x18, r25	; 24
 1be:	2a ef       	ldi	r18, 0xFA	; 250
 1c0:	30 e0       	ldi	r19, 0x00	; 0
 1c2:	f9 01       	movw	r30, r18
 1c4:	31 97       	sbiw	r30, 0x01	; 1
 1c6:	f1 f7       	brne	.-4      	; 0x1c4 <lcdint+0xe>

	_delay_ms(1);
	signal=(0<<rs)|(0<<rw)|(0<<en);
 1c8:	18 ba       	out	0x18, r1	; 24
 1ca:	64 ed       	ldi	r22, 0xD4	; 212
 1cc:	70 e3       	ldi	r23, 0x30	; 48
 1ce:	fb 01       	movw	r30, r22
 1d0:	31 97       	sbiw	r30, 0x01	; 1
 1d2:	f1 f7       	brne	.-4      	; 0x1d0 <lcdint+0x1a>



void lcdcmd(unsigned char x){

	lcdport=x;
 1d4:	f9 01       	movw	r30, r18
 1d6:	31 97       	sbiw	r30, 0x01	; 1
 1d8:	f1 f7       	brne	.-4      	; 0x1d6 <lcdint+0x20>
 1da:	e1 e0       	ldi	r30, 0x01	; 1
 1dc:	eb bb       	out	0x1b, r30	; 27
	signal=(0<<rs)|(0<<rw)|(1<<en);
 1de:	98 bb       	out	0x18, r25	; 24
 1e0:	d9 01       	movw	r26, r18
 1e2:	11 97       	sbiw	r26, 0x01	; 1
 1e4:	f1 f7       	brne	.-4      	; 0x1e2 <lcdint+0x2c>

	_delay_ms(1);
	signal=(0<<rs)|(0<<rw)|(0<<en);
 1e6:	18 ba       	out	0x18, r1	; 24
 1e8:	db 01       	movw	r26, r22
 1ea:	11 97       	sbiw	r26, 0x01	; 1
 1ec:	f1 f7       	brne	.-4      	; 0x1ea <lcdint+0x34>



void lcdcmd(unsigned char x){

	lcdport=x;
 1ee:	d9 01       	movw	r26, r18
 1f0:	11 97       	sbiw	r26, 0x01	; 1
 1f2:	f1 f7       	brne	.-4      	; 0x1f0 <lcdint+0x3a>
 1f4:	8f e0       	ldi	r24, 0x0F	; 15
 1f6:	8b bb       	out	0x1b, r24	; 27
	signal=(0<<rs)|(0<<rw)|(1<<en);
 1f8:	98 bb       	out	0x18, r25	; 24
 1fa:	d9 01       	movw	r26, r18
 1fc:	11 97       	sbiw	r26, 0x01	; 1
 1fe:	f1 f7       	brne	.-4      	; 0x1fc <lcdint+0x46>

	_delay_ms(1);
	signal=(0<<rs)|(0<<rw)|(0<<en);
 200:	18 ba       	out	0x18, r1	; 24
 202:	db 01       	movw	r26, r22
 204:	11 97       	sbiw	r26, 0x01	; 1
 206:	f1 f7       	brne	.-4      	; 0x204 <lcdint+0x4e>



void lcdcmd(unsigned char x){

	lcdport=x;
 208:	44 ec       	ldi	r20, 0xC4	; 196
 20a:	59 e0       	ldi	r21, 0x09	; 9
 20c:	da 01       	movw	r26, r20
 20e:	11 97       	sbiw	r26, 0x01	; 1
 210:	f1 f7       	brne	.-4      	; 0x20e <lcdint+0x58>
 212:	82 e8       	ldi	r24, 0x82	; 130
 214:	8b bb       	out	0x1b, r24	; 27
	signal=(0<<rs)|(0<<rw)|(1<<en);
 216:	98 bb       	out	0x18, r25	; 24
 218:	d9 01       	movw	r26, r18
 21a:	11 97       	sbiw	r26, 0x01	; 1
 21c:	f1 f7       	brne	.-4      	; 0x21a <lcdint+0x64>

	_delay_ms(1);
	signal=(0<<rs)|(0<<rw)|(0<<en);
 21e:	18 ba       	out	0x18, r1	; 24
 220:	db 01       	movw	r26, r22
 222:	11 97       	sbiw	r26, 0x01	; 1
 224:	f1 f7       	brne	.-4      	; 0x222 <lcdint+0x6c>



void lcdcmd(unsigned char x){

	lcdport=x;
 226:	da 01       	movw	r26, r20
 228:	11 97       	sbiw	r26, 0x01	; 1
 22a:	f1 f7       	brne	.-4      	; 0x228 <lcdint+0x72>
 22c:	89 e8       	ldi	r24, 0x89	; 137
 22e:	8b bb       	out	0x1b, r24	; 27
	signal=(0<<rs)|(0<<rw)|(1<<en);
 230:	98 bb       	out	0x18, r25	; 24
 232:	d9 01       	movw	r26, r18
 234:	11 97       	sbiw	r26, 0x01	; 1
 236:	f1 f7       	brne	.-4      	; 0x234 <lcdint+0x7e>

	_delay_ms(1);
	signal=(0<<rs)|(0<<rw)|(0<<en);
 238:	18 ba       	out	0x18, r1	; 24
 23a:	db 01       	movw	r26, r22
 23c:	11 97       	sbiw	r26, 0x01	; 1
 23e:	f1 f7       	brne	.-4      	; 0x23c <lcdint+0x86>



void lcdcmd(unsigned char x){

	lcdport=x;
 240:	da 01       	movw	r26, r20
 242:	11 97       	sbiw	r26, 0x01	; 1
 244:	f1 f7       	brne	.-4      	; 0x242 <lcdint+0x8c>
 246:	eb bb       	out	0x1b, r30	; 27
	signal=(0<<rs)|(0<<rw)|(1<<en);
 248:	98 bb       	out	0x18, r25	; 24
 24a:	c9 01       	movw	r24, r18
 24c:	01 97       	sbiw	r24, 0x01	; 1
 24e:	f1 f7       	brne	.-4      	; 0x24c <lcdint+0x96>

	_delay_ms(1);
	signal=(0<<rs)|(0<<rw)|(0<<en);
 250:	18 ba       	out	0x18, r1	; 24
 252:	cb 01       	movw	r24, r22
 254:	01 97       	sbiw	r24, 0x01	; 1
 256:	f1 f7       	brne	.-4      	; 0x254 <lcdint+0x9e>
   lcdcmd(0x89);
   _delay_ms(10);
   
   lcdcmd(0x01);
   _delay_ms(10);
}
 258:	ca 01       	movw	r24, r20
 25a:	01 97       	sbiw	r24, 0x01	; 1
 25c:	f1 f7       	brne	.-4      	; 0x25a <lcdint+0xa4>
 25e:	08 95       	ret

00000260 <lcdcmd>:



void lcdcmd(unsigned char x){

	lcdport=x;
 260:	8b bb       	out	0x1b, r24	; 27
	signal=(0<<rs)|(0<<rw)|(1<<en);
 262:	84 e0       	ldi	r24, 0x04	; 4
 264:	88 bb       	out	0x18, r24	; 24
 266:	8a ef       	ldi	r24, 0xFA	; 250
 268:	90 e0       	ldi	r25, 0x00	; 0
 26a:	01 97       	sbiw	r24, 0x01	; 1
 26c:	f1 f7       	brne	.-4      	; 0x26a <lcdcmd+0xa>

	_delay_ms(1);
	signal=(0<<rs)|(0<<rw)|(0<<en);
 26e:	18 ba       	out	0x18, r1	; 24
 270:	84 ed       	ldi	r24, 0xD4	; 212
 272:	90 e3       	ldi	r25, 0x30	; 48
 274:	01 97       	sbiw	r24, 0x01	; 1
 276:	f1 f7       	brne	.-4      	; 0x274 <lcdcmd+0x14>

	_delay_ms(50);

}
 278:	08 95       	ret

0000027a <lcddata>:

void lcddata(unsigned char data){

	lcdport= data;
 27a:	8b bb       	out	0x1b, r24	; 27
	signal= (1<<rs)|(0<<rw)|(1<<en);
 27c:	85 e0       	ldi	r24, 0x05	; 5
 27e:	88 bb       	out	0x18, r24	; 24
 280:	8a ef       	ldi	r24, 0xFA	; 250
 282:	90 e0       	ldi	r25, 0x00	; 0
 284:	01 97       	sbiw	r24, 0x01	; 1
 286:	f1 f7       	brne	.-4      	; 0x284 <lcddata+0xa>

	_delay_ms(1);
	signal= (1<<rs)|(0<<rw)|(0<<en);
 288:	81 e0       	ldi	r24, 0x01	; 1
 28a:	88 bb       	out	0x18, r24	; 24
 28c:	84 ed       	ldi	r24, 0xD4	; 212
 28e:	90 e3       	ldi	r25, 0x30	; 48
 290:	01 97       	sbiw	r24, 0x01	; 1
 292:	f1 f7       	brne	.-4      	; 0x290 <lcddata+0x16>

	_delay_ms(50);

}
 294:	08 95       	ret

00000296 <lcd_read>:
unsigned char  lcd_read(){    

	signal= (1<<rs)|(1<<rw)|(1<<en);
 296:	87 e0       	ldi	r24, 0x07	; 7
 298:	88 bb       	out	0x18, r24	; 24
 29a:	8a ef       	ldi	r24, 0xFA	; 250
 29c:	90 e0       	ldi	r25, 0x00	; 0
 29e:	01 97       	sbiw	r24, 0x01	; 1
 2a0:	f1 f7       	brne	.-4      	; 0x29e <lcd_read+0x8>
	_delay_ms(1);

	signal= (1<<rs)|(1<<rw)|(0<<en);
 2a2:	83 e0       	ldi	r24, 0x03	; 3
 2a4:	88 bb       	out	0x18, r24	; 24
 2a6:	84 ed       	ldi	r24, 0xD4	; 212
 2a8:	90 e3       	ldi	r25, 0x30	; 48
 2aa:	01 97       	sbiw	r24, 0x01	; 1
 2ac:	f1 f7       	brne	.-4      	; 0x2aa <lcd_read+0x14>
	_delay_ms(50);
	}
 2ae:	08 95       	ret

000002b0 <charactersend>:
void charactersend(unsigned char data)
{
   
   lcdport= data;
 2b0:	8b bb       	out	0x1b, r24	; 27
	signal= (1<<rs)|(0<<rw)|(1<<en);
 2b2:	85 e0       	ldi	r24, 0x05	; 5
 2b4:	88 bb       	out	0x18, r24	; 24
 2b6:	8a ef       	ldi	r24, 0xFA	; 250
 2b8:	90 e0       	ldi	r25, 0x00	; 0
 2ba:	01 97       	sbiw	r24, 0x01	; 1
 2bc:	f1 f7       	brne	.-4      	; 0x2ba <charactersend+0xa>

	_delay_ms(1);
	signal= (1<<rs)|(0<<rw)|(0<<en);
 2be:	81 e0       	ldi	r24, 0x01	; 1
 2c0:	88 bb       	out	0x18, r24	; 24
 2c2:	84 ed       	ldi	r24, 0xD4	; 212
 2c4:	90 e3       	ldi	r25, 0x30	; 48
 2c6:	01 97       	sbiw	r24, 0x01	; 1
 2c8:	f1 f7       	brne	.-4      	; 0x2c6 <charactersend+0x16>

	_delay_ms(50);
}
 2ca:	08 95       	ret

000002cc <String>:
void String(char *characters)
{
 2cc:	fc 01       	movw	r30, r24
	}
void charactersend(unsigned char data)
{
   
   lcdport= data;
	signal= (1<<rs)|(0<<rw)|(1<<en);
 2ce:	75 e0       	ldi	r23, 0x05	; 5
 2d0:	4a ef       	ldi	r20, 0xFA	; 250
 2d2:	50 e0       	ldi	r21, 0x00	; 0

	_delay_ms(1);
	signal= (1<<rs)|(0<<rw)|(0<<en);
 2d4:	61 e0       	ldi	r22, 0x01	; 1
 2d6:	24 ed       	ldi	r18, 0xD4	; 212
 2d8:	30 e3       	ldi	r19, 0x30	; 48
 2da:	0a c0       	rjmp	.+20     	; 0x2f0 <String+0x24>
}
void String(char *characters)
{
    while(*characters > 0)
    {
        charactersend(*characters++);
 2dc:	31 96       	adiw	r30, 0x01	; 1
	_delay_ms(50);
	}
void charactersend(unsigned char data)
{
   
   lcdport= data;
 2de:	8b bb       	out	0x1b, r24	; 27
	signal= (1<<rs)|(0<<rw)|(1<<en);
 2e0:	78 bb       	out	0x18, r23	; 24
 2e2:	ca 01       	movw	r24, r20
 2e4:	01 97       	sbiw	r24, 0x01	; 1
 2e6:	f1 f7       	brne	.-4      	; 0x2e4 <String+0x18>

	_delay_ms(1);
	signal= (1<<rs)|(0<<rw)|(0<<en);
 2e8:	68 bb       	out	0x18, r22	; 24
 2ea:	c9 01       	movw	r24, r18
 2ec:	01 97       	sbiw	r24, 0x01	; 1
 2ee:	f1 f7       	brne	.-4      	; 0x2ec <String+0x20>

	_delay_ms(50);
}
void String(char *characters)
{
    while(*characters > 0)
 2f0:	80 81       	ld	r24, Z
 2f2:	88 23       	and	r24, r24
 2f4:	99 f7       	brne	.-26     	; 0x2dc <String+0x10>
    {
        charactersend(*characters++);
    }
}
 2f6:	08 95       	ret

000002f8 <main>:
void lcddata(unsigned char data);
//void command(unsigned char cmd);
void charactersend(unsigned char character);
void String(char *characters);

int main(){
 2f8:	2f 92       	push	r2
 2fa:	3f 92       	push	r3
 2fc:	4f 92       	push	r4
 2fe:	5f 92       	push	r5
 300:	6f 92       	push	r6
 302:	7f 92       	push	r7
 304:	8f 92       	push	r8
 306:	9f 92       	push	r9
 308:	af 92       	push	r10
 30a:	bf 92       	push	r11
 30c:	cf 92       	push	r12
 30e:	df 92       	push	r13
 310:	ef 92       	push	r14
 312:	ff 92       	push	r15
 314:	0f 93       	push	r16
 316:	1f 93       	push	r17
 318:	cf 93       	push	r28
 31a:	df 93       	push	r29

	DDR_A=0xff;
 31c:	44 24       	eor	r4, r4
 31e:	4a 94       	dec	r4
	DDR_B=0x0f;
	DDR_D=0xf0;
 320:	70 ef       	ldi	r23, 0xF0	; 240
 322:	27 2e       	mov	r2, r23
	
	DDR_C|=1<<0 && 1<<1;
	PORTC=0x01;
 324:	01 e0       	ldi	r16, 0x01	; 1
 326:	6a ef       	ldi	r22, 0xFA	; 250
 328:	c6 2e       	mov	r12, r22
 32a:	d1 2c       	mov	r13, r1

}

void lcddata(unsigned char data){

	lcdport= data;
 32c:	54 ed       	ldi	r21, 0xD4	; 212
 32e:	e5 2e       	mov	r14, r21
 330:	50 e3       	ldi	r21, 0x30	; 48
 332:	f5 2e       	mov	r15, r21
 334:	49 e1       	ldi	r20, 0x19	; 25
 336:	a4 2e       	mov	r10, r20
 338:	b1 2c       	mov	r11, r1
 33a:	3a e2       	ldi	r19, 0x2A	; 42
 33c:	33 2e       	mov	r3, r19
	signal= (1<<rs)|(0<<rw)|(1<<en);
 33e:	25 e0       	ldi	r18, 0x05	; 5
 340:	52 2e       	mov	r5, r18
 342:	9a ef       	ldi	r25, 0xFA	; 250
 344:	69 2e       	mov	r6, r25
 346:	71 2c       	mov	r7, r1
void charactersend(unsigned char character);
void String(char *characters);

int main(){

	DDR_A=0xff;
 348:	84 ed       	ldi	r24, 0xD4	; 212
 34a:	88 2e       	mov	r8, r24
 34c:	80 e3       	ldi	r24, 0x30	; 48
 34e:	98 2e       	mov	r9, r24
 350:	4a ba       	out	0x1a, r4	; 26
	DDR_B=0x0f;
 352:	8f e0       	ldi	r24, 0x0F	; 15
 354:	87 bb       	out	0x17, r24	; 23
	DDR_D=0xf0;
 356:	21 ba       	out	0x11, r2	; 17
	
	DDR_C|=1<<0 && 1<<1;
 358:	a0 9a       	sbi	0x14, 0	; 20
	PORTC=0x01;
 35a:	05 bb       	out	0x15, r16	; 21
 35c:	84 ec       	ldi	r24, 0xC4	; 196
 35e:	99 e0       	ldi	r25, 0x09	; 9
 360:	01 97       	sbiw	r24, 0x01	; 1
 362:	f1 f7       	brne	.-4      	; 0x360 <main+0x68>
	_delay_ms(10);

	char key;

	lcdint();
 364:	0e 94 db 00 	call	0x1b6	; 0x1b6 <lcdint>
	
 
	String ("ENTER PASSWORD");
 368:	80 e6       	ldi	r24, 0x60	; 96
 36a:	90 e0       	ldi	r25, 0x00	; 0
 36c:	0e 94 66 01 	call	0x2cc	; 0x2cc <String>



void lcdcmd(unsigned char x){

	lcdport=x;
 370:	80 ec       	ldi	r24, 0xC0	; 192
 372:	8b bb       	out	0x1b, r24	; 27
	signal=(0<<rs)|(0<<rw)|(1<<en);
 374:	84 e0       	ldi	r24, 0x04	; 4
 376:	88 bb       	out	0x18, r24	; 24
 378:	c6 01       	movw	r24, r12
 37a:	01 97       	sbiw	r24, 0x01	; 1
 37c:	f1 f7       	brne	.-4      	; 0x37a <main+0x82>

	_delay_ms(1);
	signal=(0<<rs)|(0<<rw)|(0<<en);
 37e:	18 ba       	out	0x18, r1	; 24
 380:	c7 01       	movw	r24, r14
 382:	01 97       	sbiw	r24, 0x01	; 1
 384:	f1 f7       	brne	.-4      	; 0x382 <main+0x8a>
 386:	c4 ea       	ldi	r28, 0xA4	; 164
 388:	d0 e0       	ldi	r29, 0x00	; 0
	 
	

  for(int i=0;i<5;i++){  

		key=scankey();
 38a:	0e 94 d6 00 	call	0x1ac	; 0x1ac <scankey>
 38e:	20 e1       	ldi	r18, 0x10	; 16
 390:	37 e2       	ldi	r19, 0x27	; 39
 392:	f5 01       	movw	r30, r10
 394:	31 97       	sbiw	r30, 0x01	; 1
 396:	f1 f7       	brne	.-4      	; 0x394 <main+0x9c>
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 398:	21 50       	subi	r18, 0x01	; 1
 39a:	30 40       	sbci	r19, 0x00	; 0
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 39c:	d1 f7       	brne	.-12     	; 0x392 <main+0x9a>

}

void lcddata(unsigned char data){

	lcdport= data;
 39e:	3b ba       	out	0x1b, r3	; 27
	signal= (1<<rs)|(0<<rw)|(1<<en);
 3a0:	58 ba       	out	0x18, r5	; 24
 3a2:	f6 01       	movw	r30, r12
 3a4:	31 97       	sbiw	r30, 0x01	; 1
 3a6:	f1 f7       	brne	.-4      	; 0x3a4 <main+0xac>

	_delay_ms(1);
	signal= (1<<rs)|(0<<rw)|(0<<en);
 3a8:	08 bb       	out	0x18, r16	; 24
 3aa:	f7 01       	movw	r30, r14
 3ac:	31 97       	sbiw	r30, 0x01	; 1
 3ae:	f1 f7       	brne	.-4      	; 0x3ac <main+0xb4>
		key=scankey();
		_delay_ms(1000);
        
		lcddata('*');
		
		password[i]=key;	
 3b0:	89 93       	st	Y+, r24
	lcdcmd(0xC0);       
	 
	 
	

  for(int i=0;i<5;i++){  
 3b2:	80 e0       	ldi	r24, 0x00	; 0
 3b4:	c9 3a       	cpi	r28, 0xA9	; 169
 3b6:	d8 07       	cpc	r29, r24
 3b8:	41 f7       	brne	.-48     	; 0x38a <main+0x92>



void lcdcmd(unsigned char x){

	lcdport=x;
 3ba:	81 e0       	ldi	r24, 0x01	; 1
 3bc:	8b bb       	out	0x1b, r24	; 27
	signal=(0<<rs)|(0<<rw)|(1<<en);
 3be:	84 e0       	ldi	r24, 0x04	; 4
 3c0:	88 bb       	out	0x18, r24	; 24
 3c2:	c3 01       	movw	r24, r6
 3c4:	01 97       	sbiw	r24, 0x01	; 1
 3c6:	f1 f7       	brne	.-4      	; 0x3c4 <main+0xcc>

	_delay_ms(1);
	signal=(0<<rs)|(0<<rw)|(0<<en);
 3c8:	18 ba       	out	0x18, r1	; 24
 3ca:	c4 01       	movw	r24, r8
 3cc:	01 97       	sbiw	r24, 0x01	; 1
 3ce:	f1 f7       	brne	.-4      	; 0x3cc <main+0xd4>
		password[i]=key;	
        
	}
	lcdcmd(0x01);
	
	if((password[0]=='1')&&(password[1]=='2')&&(password[2]=='3')&&(password[3]=='4')&&(password[4]=='5')){
 3d0:	80 91 a4 00 	lds	r24, 0x00A4
 3d4:	81 33       	cpi	r24, 0x31	; 49
 3d6:	09 f0       	breq	.+2      	; 0x3da <main+0xe2>
 3d8:	71 c0       	rjmp	.+226    	; 0x4bc <main+0x1c4>
 3da:	80 91 a5 00 	lds	r24, 0x00A5
 3de:	82 33       	cpi	r24, 0x32	; 50
 3e0:	09 f0       	breq	.+2      	; 0x3e4 <main+0xec>
 3e2:	6c c0       	rjmp	.+216    	; 0x4bc <main+0x1c4>
 3e4:	80 91 a6 00 	lds	r24, 0x00A6
 3e8:	83 33       	cpi	r24, 0x33	; 51
 3ea:	09 f0       	breq	.+2      	; 0x3ee <main+0xf6>
 3ec:	67 c0       	rjmp	.+206    	; 0x4bc <main+0x1c4>
 3ee:	80 91 a7 00 	lds	r24, 0x00A7
 3f2:	84 33       	cpi	r24, 0x34	; 52
 3f4:	09 f0       	breq	.+2      	; 0x3f8 <main+0x100>
 3f6:	62 c0       	rjmp	.+196    	; 0x4bc <main+0x1c4>
 3f8:	80 91 a8 00 	lds	r24, 0x00A8
 3fc:	85 33       	cpi	r24, 0x35	; 53
 3fe:	09 f0       	breq	.+2      	; 0x402 <main+0x10a>
 400:	5d c0       	rjmp	.+186    	; 0x4bc <main+0x1c4>
	
		String ("CORRECT PASSWORD");
 402:	8f e6       	ldi	r24, 0x6F	; 111
 404:	90 e0       	ldi	r25, 0x00	; 0
 406:	0e 94 66 01 	call	0x2cc	; 0x2cc <String>
		
		//DDRC=0xff;
		DDR_C|=1<<0 && 1<<1;
 40a:	a0 9a       	sbi	0x14, 0	; 20
		PORTC=0x00;
 40c:	15 ba       	out	0x15, r1	; 21
 40e:	80 e5       	ldi	r24, 0x50	; 80
 410:	93 ec       	ldi	r25, 0xC3	; 195
 412:	f5 01       	movw	r30, r10
 414:	31 97       	sbiw	r30, 0x01	; 1
 416:	f1 f7       	brne	.-4      	; 0x414 <main+0x11c>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 418:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 41a:	d9 f7       	brne	.-10     	; 0x412 <main+0x11a>
		_delay_ms(5000);
		PORTC=0x00;
 41c:	15 ba       	out	0x15, r1	; 21



void lcdcmd(unsigned char x){

	lcdport=x;
 41e:	0b bb       	out	0x1b, r16	; 27
	signal=(0<<rs)|(0<<rw)|(1<<en);
 420:	14 e0       	ldi	r17, 0x04	; 4
 422:	18 bb       	out	0x18, r17	; 24
 424:	c6 01       	movw	r24, r12
 426:	01 97       	sbiw	r24, 0x01	; 1
 428:	f1 f7       	brne	.-4      	; 0x426 <main+0x12e>

	_delay_ms(1);
	signal=(0<<rs)|(0<<rw)|(0<<en);
 42a:	18 ba       	out	0x18, r1	; 24
 42c:	c7 01       	movw	r24, r14
 42e:	01 97       	sbiw	r24, 0x01	; 1
 430:	f1 f7       	brne	.-4      	; 0x42e <main+0x136>



void lcdcmd(unsigned char x){

	lcdport=x;
 432:	80 e8       	ldi	r24, 0x80	; 128
 434:	8b bb       	out	0x1b, r24	; 27
	signal=(0<<rs)|(0<<rw)|(1<<en);
 436:	18 bb       	out	0x18, r17	; 24
 438:	c6 01       	movw	r24, r12
 43a:	01 97       	sbiw	r24, 0x01	; 1
 43c:	f1 f7       	brne	.-4      	; 0x43a <main+0x142>

	_delay_ms(1);
	signal=(0<<rs)|(0<<rw)|(0<<en);
 43e:	18 ba       	out	0x18, r1	; 24
 440:	c7 01       	movw	r24, r14
 442:	01 97       	sbiw	r24, 0x01	; 1
 444:	f1 f7       	brne	.-4      	; 0x442 <main+0x14a>
		_delay_ms(5000);
		PORTC=0x00;
		lcdcmd(0x01);
		lcdcmd(0x80);
	
		String ("LOCK? PRESS 1");
 446:	80 e8       	ldi	r24, 0x80	; 128
 448:	90 e0       	ldi	r25, 0x00	; 0
 44a:	0e 94 66 01 	call	0x2cc	; 0x2cc <String>



void lcdcmd(unsigned char x){

	lcdport=x;
 44e:	80 ec       	ldi	r24, 0xC0	; 192
 450:	8b bb       	out	0x1b, r24	; 27
	signal=(0<<rs)|(0<<rw)|(1<<en);
 452:	18 bb       	out	0x18, r17	; 24
 454:	c6 01       	movw	r24, r12
 456:	01 97       	sbiw	r24, 0x01	; 1
 458:	f1 f7       	brne	.-4      	; 0x456 <main+0x15e>

	_delay_ms(1);
	signal=(0<<rs)|(0<<rw)|(0<<en);
 45a:	18 ba       	out	0x18, r1	; 24
 45c:	c7 01       	movw	r24, r14
 45e:	01 97       	sbiw	r24, 0x01	; 1
 460:	f1 f7       	brne	.-4      	; 0x45e <main+0x166>
		lcdcmd(0x80);
	
		String ("LOCK? PRESS 1");
		lcdcmd(0xC0);
		 
		key=scankey();
 462:	0e 94 d6 00 	call	0x1ac	; 0x1ac <scankey>
 466:	20 e1       	ldi	r18, 0x10	; 16
 468:	37 e2       	ldi	r19, 0x27	; 39
 46a:	f5 01       	movw	r30, r10
 46c:	31 97       	sbiw	r30, 0x01	; 1
 46e:	f1 f7       	brne	.-4      	; 0x46c <main+0x174>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 470:	21 50       	subi	r18, 0x01	; 1
 472:	30 40       	sbci	r19, 0x00	; 0
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 474:	d1 f7       	brne	.-12     	; 0x46a <main+0x172>

}

void lcddata(unsigned char data){

	lcdport= data;
 476:	8b bb       	out	0x1b, r24	; 27
	signal= (1<<rs)|(0<<rw)|(1<<en);
 478:	58 ba       	out	0x18, r5	; 24
 47a:	f6 01       	movw	r30, r12
 47c:	31 97       	sbiw	r30, 0x01	; 1
 47e:	f1 f7       	brne	.-4      	; 0x47c <main+0x184>

	_delay_ms(1);
	signal= (1<<rs)|(0<<rw)|(0<<en);
 480:	08 bb       	out	0x18, r16	; 24
 482:	f7 01       	movw	r30, r14
 484:	31 97       	sbiw	r30, 0x01	; 1
 486:	f1 f7       	brne	.-4      	; 0x484 <main+0x18c>
		key=scankey();
		_delay_ms(1000);
		  

		lcddata(key);
		lock[0]=key;
 488:	80 93 a5 00 	sts	0x00A5, r24
		
		if(lock[0]=='1'){
 48c:	81 33       	cpi	r24, 0x31	; 49
 48e:	31 f5       	brne	.+76     	; 0x4dc <main+0x1e4>



void lcdcmd(unsigned char x){

	lcdport=x;
 490:	0b bb       	out	0x1b, r16	; 27
	signal=(0<<rs)|(0<<rw)|(1<<en);
 492:	84 e0       	ldi	r24, 0x04	; 4
 494:	88 bb       	out	0x18, r24	; 24
 496:	c6 01       	movw	r24, r12
 498:	01 97       	sbiw	r24, 0x01	; 1
 49a:	f1 f7       	brne	.-4      	; 0x498 <main+0x1a0>

	_delay_ms(1);
	signal=(0<<rs)|(0<<rw)|(0<<en);
 49c:	18 ba       	out	0x18, r1	; 24
 49e:	c7 01       	movw	r24, r14
 4a0:	01 97       	sbiw	r24, 0x01	; 1
 4a2:	f1 f7       	brne	.-4      	; 0x4a0 <main+0x1a8>
			PORTC=0x01;
			_delay_ms(3000);
			PORTC=0x00;*/
			lcdcmd(0x01);
		
			String ("LOCKED");
 4a4:	8e e8       	ldi	r24, 0x8E	; 142
 4a6:	90 e0       	ldi	r25, 0x00	; 0
 4a8:	0e 94 66 01 	call	0x2cc	; 0x2cc <String>
 4ac:	80 e1       	ldi	r24, 0x10	; 16
 4ae:	97 e2       	ldi	r25, 0x27	; 39
 4b0:	f5 01       	movw	r30, r10
 4b2:	31 97       	sbiw	r30, 0x01	; 1
 4b4:	f1 f7       	brne	.-4      	; 0x4b2 <main+0x1ba>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 4b6:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 4b8:	d9 f7       	brne	.-10     	; 0x4b0 <main+0x1b8>
 4ba:	4a cf       	rjmp	.-364    	; 0x350 <main+0x58>
		 
	}
		
	else{
	
		String ("WRONG PASSWORD");
 4bc:	85 e9       	ldi	r24, 0x95	; 149
 4be:	90 e0       	ldi	r25, 0x00	; 0
 4c0:	0e 94 66 01 	call	0x2cc	; 0x2cc <String>
		DDR_C=0xff;
 4c4:	44 ba       	out	0x14, r4	; 20
		//DDRC|=1<<0 && 1<<1;
			PORTC=0x03;
 4c6:	83 e0       	ldi	r24, 0x03	; 3
 4c8:	85 bb       	out	0x15, r24	; 21
 4ca:	80 e3       	ldi	r24, 0x30	; 48
 4cc:	95 e7       	ldi	r25, 0x75	; 117
 4ce:	f5 01       	movw	r30, r10
 4d0:	31 97       	sbiw	r30, 0x01	; 1
 4d2:	f1 f7       	brne	.-4      	; 0x4d0 <main+0x1d8>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 4d4:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 4d6:	d9 f7       	brne	.-10     	; 0x4ce <main+0x1d6>
		//	PORTC=0x02;
			_delay_ms(3000);
			PORTC=0x00;
 4d8:	15 ba       	out	0x15, r1	; 21
 4da:	3a cf       	rjmp	.-396    	; 0x350 <main+0x58>
	 
		return main();
	 
	}
}	
 4dc:	80 e0       	ldi	r24, 0x00	; 0
 4de:	90 e0       	ldi	r25, 0x00	; 0
 4e0:	df 91       	pop	r29
 4e2:	cf 91       	pop	r28
 4e4:	1f 91       	pop	r17
 4e6:	0f 91       	pop	r16
 4e8:	ff 90       	pop	r15
 4ea:	ef 90       	pop	r14
 4ec:	df 90       	pop	r13
 4ee:	cf 90       	pop	r12
 4f0:	bf 90       	pop	r11
 4f2:	af 90       	pop	r10
 4f4:	9f 90       	pop	r9
 4f6:	8f 90       	pop	r8
 4f8:	7f 90       	pop	r7
 4fa:	6f 90       	pop	r6
 4fc:	5f 90       	pop	r5
 4fe:	4f 90       	pop	r4
 500:	3f 90       	pop	r3
 502:	2f 90       	pop	r2
 504:	08 95       	ret

00000506 <_exit>:
 506:	f8 94       	cli

00000508 <__stop_program>:
 508:	ff cf       	rjmp	.-2      	; 0x508 <__stop_program>
